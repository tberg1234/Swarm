#Author: Taylor Bergeron

include "include/vec2.bzz"

v = stigmergy.create(1)
#s = swarm.create(1)
#in_backbone = 0.0
var min_robot_id_final = -1.0
var max_robot_id_final = -1.0
max_robot_distance_final = -1.0
backbone_dist = 0.0
backbone_azimuth = 0.0

# Lennard-Jones parameters
TARGET_KIN     = 50.0
EPSILON_KIN    = 500.0
TARGET_NONKIN  = 40.0
EPSILON_NONKIN = 100.0

function init() {
	#v = stigmergy.create(1)
	#s.join()

	s1 = swarm.create(1)
	s1.select(id % 2 == 0)
	s2 = s1.others(2)

    x1 = 0.0
	y1 = 0.0
	yaw1 = 0.0
    var info = { .x=x1, .y=y1, .yaw=yaw1, .in_backbone = 0.0}
    v.put(id, info)
    timestep = 0
	v.put("sees_object", 0.0)
	v.put("id_that_sees_object", -1.0)
	cell_counter = 0
	backbone_exist = 0.0
	v.put(id+100, 0.0)
}

function step() {

    i = v.get(id)
    in_backbone = i.in_backbone

	sees_obj = v.get("sees_object")
	# log(id, " ", sees_obj)
	go_to_dist = 1000000.0
	go_to_azimuth = 0.0

	var gps = determine_gps()

	#
	# if((sees_obj==1.0) and (in_backbone==0.0)){
	# 	if(cell_counter < 300){
	# 		log("creating cell")
	# 		cell()
	# 	}
	# 	else{
	# 	  var a = findlight()
	# 	  goto(a.x, a.y)
	# 	  log("finding light")
	# 	}
	# 	cell_counter = cell_counter + 1
	# }

	# if((sees_obj==1.0) and (gps==0.0)){
	# 	sees_obj_id =
	# }


	##USED TO BE ELSE IF


    if(gps==0.0){

		set_wheels(5.0,5.0)

        var last_info = v.get(id)
        var last_pos_x = last_info.x
        var last_pos_y = last_info.y
        var last_yaw = last_info.yaw
        var last_backbone = last_info.in_backbone


        # if(in_backbone == 0.0){

		backbone_exist = 0.0
		neighbors.foreach(
            function(rid, data) {
				robot_info = v.get(rid)
				robot_is_backbone = robot_info.in_backbone
				#log(rid, robot_is_backbone)
				if(robot_is_backbone==1.0){
					backbone_exist = 1.0
				}
            })

		if(backbone_exist == 0.0){

            closest_id = get_closest_id(last_pos_x, last_pos_y)
    		log(id, " chose ", closest_id)
            if(closest_id != -1){
                log(id, " is adding ", closest_id, " to backbone")
                var other_robots_info = v.get(closest_id)
                var other_pos_x = other_robots_info.x
                var other_pos_y = other_robots_info.y
                var other_yaw = other_robots_info.yaw

			    # if(((proximity[0].value != 0 and (proximity[0].angle==light[0].angle)) or (proximity[1].value != 0 and (proximity[1].angle==light[1].angle)) or (proximity[2].value != 0 and (proximity[2].angle==light[2].angle)) or (proximity[6].value != 0 and (proximity[6].angle==light[6].angle)) or (proximity[7].value != 0 and (proximity[7].angle==light[7].angle))) ){
				# }

				var new_other_robot_info = { .x=other_pos_x, .y=other_pos_y, .yaw=other_yaw, .in_backbone = 1.0}
	            v.put(closest_id, new_other_robot_info)
            }
        }

		else if (in_backbone == 2.0){
			perimeter_counter = 0.0
			neighbors.foreach(
			  function(rid, data) {
				perimeter_walker = v.get(rid+100)
				if(perimeter_walker == 1.0){
					perimeter_counter = perimeter_counter + 1.0
				} })

			if(perimeter_counter > 2.0){
				#log("making cell ", id, " ", perimeter_counter)
				neighbors.broadcast("finding_light", 1.0)
				var a = findlight()
				goto(a.x, a.y)

				finding_light_farthest_info = get_furthest_id()
				if(finding_light_farthest_info.id != -1){
					#log(id, " is farthest away from ", finding_light_farthest_info.id)
					area = (finding_light_farthest_info.distance * finding_light_farthest_info.distance)/2
					log(id, " area calc: ", area)

					b_info = get_info_from_backbone()
					#log(id, ": b distance ", b_info.distance, " b azimuth ", b_info.azimuth)

					c = finding_light_farthest_info.distance
					n = c/(2*math.sqrt(2))

					if(b_info.distance != 0){
						az = b_info.azimuth
						dis = b_info.distance

						my_x = dis*math.cos(az)
						my_y = dis*math.sin(az)

						backbone_location = v.get(finding_light_farthest_info.id)

						obj_x = my_x + n + backbone_location.x
						obj_y = my_y + n + backbone_location.y

						log("estimated position: x: ", obj_x, " y: ", obj_y)
					}


				}
			}
		}
		# 	}
        # else{
		#
	    #     if(((proximity[0].value != 0 and (proximity[0].angle==light[0].angle)) or (proximity[1].value != 0 and (proximity[1].angle==light[1].angle)) or (proximity[2].value != 0 and (proximity[2].angle==light[2].angle)) or (proximity[6].value != 0 and (proximity[6].angle==light[6].angle)) or (proximity[7].value != 0 and (proximity[7].angle==light[7].angle))) )
		# 	{
		# 		v.put("sees_object", 1.0)
		# 		v.put("id_that_sees_object", id)
		# 		# var loc_inf
		# 		# v.put("location_of_robot_that_sees_object", loc_info)
		# 		log(id, " found object")
		# 		set_wheels(0.0,0.0)
		# 	}
        # }

		var no_gps_info = { .x=last_pos_x, .y=last_pos_y, .yaw=last_yaw, .in_backbone = 2.0}
		v.put(id, no_gps_info)


    }
    else if(gps==1.0){
        x1 = pose["position"]["x"]
    	y1 = pose["position"]["y"]
    	yaw1 = pose["orientation"]["yaw"]

        var infoo = { .x=x1, .y=y1, .yaw=yaw1, .in_backbone = in_backbone}
        v.put(id, infoo)

        if(in_backbone == 0.0){
            #chilling, walking around
            neighbors.broadcast("free", 1.0)
            obstacle_avoidance()
        }
        else if (in_backbone == 1.0){
            #successfully part of the backbone DONT MOVE
            # right now, just have robot stop
            #log(id, " is in backbone")
            neighbors.broadcast("in_backbone", 1.0)
			neighbors.broadcast("in_backbone_id", id)
            set_wheels(0.0,0.0)
        }
		else{
			#log("used to be in the grey: ", id)
			#set_wheels(0.0,0.0)
			magnitude = 5
			m_x = magnitude * math.cos(math.pi/2)
			m_y = magnitude * math.sin(math.pi/2)
			set_wheels(-1.0,5.0)
			#neighbors.broadcast("travelling_perimeter", 1.0)
			v.put(id+100, 1.0)
		}
    }

}


function findlight(){
	var counter = 0.0
	var max_light = 0.0
	var max_light_angle = 0.0
	var same = false
	while (counter < 8.0){
		var sensor_val = light[counter]
		var l = sensor_val.value
		var angle = sensor_val.angle
		if (l > max_light){
			max_light = l
			max_light_angle = angle
		}
		counter = counter + 1.0
	}

	var vector = {
		.x = (max_light) * math.cos(max_light_angle)*100,
		.y = (max_light) * math.sin(max_light_angle)*100
	}

	return vector

}



function get_closest_id(last_x, last_y){

    min_dist = 100000.0
    #var min_robot_id_final = -1.0

    neighbors.listen("free",
        function(vid, value, rid) {
            neighbors.foreach(
                function(robotid, data) {
                if(rid==robotid){
                    #log(id," to ", robotid, " is ", data.distance)
                    if (data.distance < min_dist){
                        #log(id," to ", robotid, " is min from ", min_dist)
                        min_dist = data.distance
                        min_robot_id = robotid
                    }
                } })
            #log("The min robot is: ", min_robot_id)
            min_robot_id_final = min_robot_id
        })
		#log(min_robot_id_final)
		return min_robot_id_final
}

function get_furthest_id(){

    max_dist = 0.0
    #var min_robot_id_final = -1.0

    neighbors.listen("finding_light",
        function(vid, value, rid) {
            neighbors.foreach(
                function(robotid, data) {
                if(rid==robotid){
                    #log(id," to ", robotid, " is ", data.distance)
                    if (data.distance > max_dist){
                        #log(id," to ", robotid, " is min from ", min_dist)
                        max_dist = data.distance
                        max_robot_id = robotid
                    }
                } })
            #log("The min robot is: ", min_robot_id)
            max_robot_id_final = max_robot_id
			max_robot_distance_final = max_dist
        })
		#log(min_robot_id_final)
		var far_robot_info = {.id = max_robot_id_final, .distance = max_robot_distance_final}
		return far_robot_info
}

function get_info_from_backbone(){

    #var min_robot_id_final = -1.0

    neighbors.listen("in_backbone_id",
        function(vid, value, rid) {
            neighbors.foreach(
                function(robotid, data) {
                if(rid==robotid){
                    #log(id," to ", robotid, " is ", data.distance)
                    backbone_dist = data.distance
					backbone_azimuth = data.azimuth
                } })
            #log("The min robot is: ", min_robot_id)
            # max_robot_id_final = max_robot_id
			# max_robot_distance_final = max_dist
        })
		#log(min_robot_id_final)
		var backbone_return_info = {.distance = backbone_dist, .azimuth = backbone_azimuth}
		return backbone_return_info
}

function determine_gps(){
	var bottom_val = ground[0]["value"]
	var gps= 1.0
    if (bottom_val < 1.0){
        gps = 0.0
    }
    return gps

}

function obstacle_avoidance(){
	var magnitude = 5.0
	var obstacle = read_proximity()
	x = magnitude * math.cos(math.pi + obstacle)
	y = magnitude * math.sin(math.pi + obstacle)

	#if angle behind robot, ignore
	if (obstacle == -math.pi){
		#nothing is detected
		set_wheels(magnitude, magnitude)
	}
	else {
		#something is detected
		#isolate cases near 0 to avoid errors
		if (x<0.000001 and x>-0.000001){
			x=0
		}
		if (y<0.000001 and y>-0.000001){
			y=0
		}

		#sets center of the mass of the robot to half x and half y
		#log(id, ": speedx: ",x," speed y: ", y)
		gotoc(x/2, y/2)

	}
}

function read_proximity(){
	var counter = 0.0
	var max_reading = 0.0
	var obstacle_angle = -math.pi

	while (counter < 8.0){
		var sensor_val = proximity[counter].value
		var sensor_angle = proximity[counter].angle
		if(sensor_val > max_reading){
			max_reading = sensor_val
			obstacle_angle = sensor_angle
			#log("Obstacle infront of robot ", id, " at sensor ", counter)
		}
		counter = counter + 1.0
	}
	return obstacle_angle

}

function destroy(){}

function reset(){}
